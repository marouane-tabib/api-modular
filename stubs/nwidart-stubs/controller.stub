<?php

namespace $CLASS_NAMESPACE$;

use App\Http\Controllers\Controller;
use App\Http\Requests\Api\FilterRequest;
use Flugg\Responder\Responder;
use Flugg\Responder\Http\Responses\SuccessResponseBuilder;
use Modules\$STUDLY_NAME$\Http\Requests\$STUDLY_NAME$StoreRequest;
use Modules\$STUDLY_NAME$\Http\Requests\$STUDLY_NAME$UpdateRequest;
use Modules\$STUDLY_NAME$\Services\$STUDLY_NAME$Service;

/**
 * @group $STUDLY_NAME$ Process
 *
 * Handles operations related to $STUDLY_NAME$ resources.
 *
 * ### Endpoints
 *
 * - **GET /$LOWER_NAME$** - Retrieves a list of all $LOWER_NAME$s.
 * - **GET /$LOWER_NAME$/{id}** - Retrieves the details of a specific $LOWER_NAME$.
 * - **POST /$LOWER_NAME$** - Creates a new $LOWER_NAME$ with the provided data.
 * - **PUT /$LOWER_NAME$/{id}** - Updates the details of an existing $LOWER_NAME$.
 * - **DELETE /$LOWER_NAME$/{id}** - Deletes the specified $LOWER_NAME$ from the system.
 *
 * All operations return standardized responses according to the API specification.
 */
class $CLASS$ extends Controller
{
    /**
     * Constructor for $CLASS$
     *
     * @param $STUDLY_NAME$Service $service The service for handling $STUDLY_NAME$ operations
     * @param Responder $responder The responder for building API responses
     */
    public function __construct(
        protected $STUDLY_NAME$Service $service,
        protected Responder $responder
    ) {
        
    }
    
    /**
     * Retrieve a list of $LOWER_NAME$s
     *
     * @param FilterRequest $request The request containing filter parameters
     * @return SuccessResponseBuilder The response containing the list of $LOWER_NAME$s
     */
    public function index(FilterRequest $request): SuccessResponseBuilder
    {
        return $this->responder->success($this->service->index($request->validated()));
    }

    /**
     * Retrieve a specific $LOWER_NAME$ by ID
     *
     * @param int $id The ID of the $LOWER_NAME$ to retrieve
     * @return SuccessResponseBuilder The response containing the $LOWER_NAME$ details
     */
    public function show(int $id): SuccessResponseBuilder
    {
        return $this->responder->success($this->service->show($id));
    }

    /**
     * Create a new $LOWER_NAME$
     *
     * @param $STUDLY_NAME$StoreRequest $request The request containing the $LOWER_NAME$ data
     * @return SuccessResponseBuilder The response containing the created $LOWER_NAME$
     */
    public function store($STUDLY_NAME$StoreRequest $request): SuccessResponseBuilder
    {
        return $this->responder->success($this->service->store($request->validated()));
    }

    /**
     * Update an existing $LOWER_NAME$
     *
     * @param $STUDLY_NAME$UpdateRequest $request The request containing the updated $LOWER_NAME$ data
     * @param int $id The ID of the $LOWER_NAME$ to update
     * @return SuccessResponseBuilder The response indicating successful update
     */
    public function update($STUDLY_NAME$UpdateRequest $request, int $id): SuccessResponseBuilder
    {
        $this->service->update($id, $request->validated());

        return $this->responder->success();
    }

    /**
     * Delete a $LOWER_NAME$
     *
     * @param int $id The ID of the $LOWER_NAME$ to delete
     * @return SuccessResponseBuilder The response indicating successful deletion
     */
    public function destroy(int $id): SuccessResponseBuilder
    {
        $this->service->destroy($id);
        
        return $this->responder->success();
    }
}
